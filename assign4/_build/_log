### Starting build.
# Target: src/main.ml.depends, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, debug, extension:ml, file:src/main.ml, ocaml, ocamldep, quiet, short_paths, thread, traverse }
ocamlfind ocamldep -package core -ppx 'ppx-jane -as-ppx' -modules src/main.ml > src/main.ml.depends # cached
# Target: src/ast.mli.depends, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, debug, extension:mli, file:src/ast.mli, ocaml, ocamldep, quiet, short_paths, thread, traverse }
ocamlfind ocamldep -package core -ppx 'ppx-jane -as-ppx' -modules src/ast.mli > src/ast.mli.depends # cached
# Target: src/ast.cmi, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, byte, compile, debug, extension:mli, file:src/ast.mli, interf, ocaml, quiet, short_paths, thread, traverse }
ocamlfind ocamlc -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx 'ppx-jane -as-ppx' -I src -o src/ast.cmi src/ast.mli # cached
# Target: src/ast_util.mli.depends, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, debug, extension:mli, file:src/ast_util.mli, ocaml, ocamldep, quiet, short_paths, thread, traverse }
ocamlfind ocamldep -package core -ppx 'ppx-jane -as-ppx' -modules src/ast_util.mli > src/ast_util.mli.depends # cached
# Target: src/ast_util.cmi, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, byte, compile, debug, extension:mli, file:src/ast_util.mli, interf, ocaml, quiet, short_paths, thread, traverse }
ocamlfind ocamlc -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx 'ppx-jane -as-ppx' -I src -o src/ast_util.cmi src/ast_util.mli # cached
# Target: src/flags.mli.depends, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, debug, extension:mli, file:src/flags.mli, ocaml, ocamldep, quiet, short_paths, thread, traverse }
ocamlfind ocamldep -package core -ppx 'ppx-jane -as-ppx' -modules src/flags.mli > src/flags.mli.depends # cached
# Target: src/flags.cmi, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, byte, compile, debug, extension:mli, file:src/flags.mli, interf, ocaml, quiet, short_paths, thread, traverse }
ocamlfind ocamlc -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx 'ppx-jane -as-ppx' -I src -o src/flags.cmi src/flags.mli # cached
# Target: src/interpreter.mli.depends, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, debug, extension:mli, file:src/interpreter.mli, ocaml, ocamldep, quiet, short_paths, thread, traverse }
ocamlfind ocamldep -package core -ppx 'ppx-jane -as-ppx' -modules src/interpreter.mli > src/interpreter.mli.depends # cached
# Target: src/interpreter.cmi, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, byte, compile, debug, extension:mli, file:src/interpreter.mli, interf, ocaml, quiet, short_paths, thread, traverse }
ocamlfind ocamlc -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx 'ppx-jane -as-ppx' -I src -o src/interpreter.cmi src/interpreter.mli # cached
# Target: src/parser.ml.depends, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, debug, extension:ml, file:src/parser.ml, ocaml, ocamldep, quiet, short_paths, thread, traverse }
ocamlfind ocamldep -package core -ppx 'ppx-jane -as-ppx' -modules src/parser.ml > src/parser.ml.depends # cached
# Target: src/grammar.mly.depends, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, debug, extension:mly, file:src/grammar.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet, short_paths, thread, traverse }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' src/grammar.mly > src/grammar.mly.depends # cached
# Target: src/grammar.mly, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, byte, compile, debug, extension:ml, extension:mly, file:src/grammar.ml, file:src/grammar.mly, infer, menhir, ocaml, parser, quiet, short_paths, thread, traverse }
menhir --ocamlc 'ocamlfind ocamlc -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx '\''ppx-jane -as-ppx'\'' -I src' --infer src/grammar.mly # cached
# Target: src/grammar.mli.depends, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, debug, extension:mli, file:src/grammar.mli, ocaml, ocamldep, quiet, short_paths, thread, traverse }
ocamlfind ocamldep -package core -ppx 'ppx-jane -as-ppx' -modules src/grammar.mli > src/grammar.mli.depends # cached
# Target: src/grammar.cmi, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, byte, compile, debug, extension:mli, file:src/grammar.mli, interf, ocaml, quiet, short_paths, thread, traverse }
ocamlfind ocamlc -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx 'ppx-jane -as-ppx' -I src -o src/grammar.cmi src/grammar.mli # cached
# Target: src/lexer.mll, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, debug, extension:mll, file:src/lexer.mll, lexer, ocaml, ocamllex, quiet, short_paths, thread, traverse }
/Users/kunhokim/.opam/4.06.1/bin/ocamllex.opt -q src/lexer.mll # cached
# Target: src/lexer.ml.depends, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, debug, extension:ml, file:src/lexer.ml, ocaml, ocamldep, quiet, short_paths, thread, traverse }
ocamlfind ocamldep -package core -ppx 'ppx-jane -as-ppx' -modules src/lexer.ml > src/lexer.ml.depends # cached
# Target: src/lexer.cmo, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:src/lexer.cmo, file:src/lexer.ml, implem, ocaml, quiet, short_paths, thread, traverse }
ocamlfind ocamlc -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx 'ppx-jane -as-ppx' -I src -o src/lexer.cmo src/lexer.ml # cached
# Target: src/parser.cmo, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:src/parser.cmo, file:src/parser.ml, implem, ocaml, quiet, short_paths, thread, traverse }
ocamlfind ocamlc -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx 'ppx-jane -as-ppx' -I src -o src/parser.cmo src/parser.ml # cached
# Target: src/typecheck.mli.depends, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, debug, extension:mli, file:src/typecheck.mli, ocaml, ocamldep, quiet, short_paths, thread, traverse }
ocamlfind ocamldep -package core -ppx 'ppx-jane -as-ppx' -modules src/typecheck.mli > src/typecheck.mli.depends # cached
# Target: src/typecheck.cmi, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, byte, compile, debug, extension:mli, file:src/typecheck.mli, interf, ocaml, quiet, short_paths, thread, traverse }
ocamlfind ocamlc -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx 'ppx-jane -as-ppx' -I src -o src/typecheck.cmi src/typecheck.mli # cached
# Target: src/main.cmo, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:src/main.cmo, file:src/main.ml, implem, ocaml, quiet, short_paths, thread, traverse }
ocamlfind ocamlc -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx 'ppx-jane -as-ppx' -I src -o src/main.cmo src/main.ml # cached
# Target: src/ast.ml.depends, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, debug, extension:ml, file:src/ast.ml, ocaml, ocamldep, quiet, short_paths, thread, traverse }
ocamlfind ocamldep -package core -ppx 'ppx-jane -as-ppx' -modules src/ast.ml > src/ast.ml.depends # cached
# Target: src/ast.cmx, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, compile, debug, extension:cmx, extension:ml, file:src/ast.cmx, file:src/ast.ml, implem, native, ocaml, quiet, short_paths, thread, traverse }
ocamlfind ocamlopt -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx 'ppx-jane -as-ppx' -I src -o src/ast.cmx src/ast.ml # cached
# Target: src/ast_util.ml.depends, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, debug, extension:ml, file:src/ast_util.ml, ocaml, ocamldep, quiet, short_paths, thread, traverse }
ocamlfind ocamldep -package core -ppx 'ppx-jane -as-ppx' -modules src/ast_util.ml > src/ast_util.ml.depends # cached
# Target: src/flags.ml.depends, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, debug, extension:ml, file:src/flags.ml, ocaml, ocamldep, quiet, short_paths, thread, traverse }
ocamlfind ocamldep -package core -ppx 'ppx-jane -as-ppx' -modules src/flags.ml > src/flags.ml.depends # cached
# Target: src/flags.cmx, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, compile, debug, extension:cmx, extension:ml, file:src/flags.cmx, file:src/flags.ml, implem, native, ocaml, quiet, short_paths, thread, traverse }
ocamlfind ocamlopt -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx 'ppx-jane -as-ppx' -I src -o src/flags.cmx src/flags.ml # cached
# Target: src/grammar.ml.depends, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, debug, extension:ml, file:src/grammar.ml, ocaml, ocamldep, quiet, short_paths, thread, traverse }
ocamlfind ocamldep -package core -ppx 'ppx-jane -as-ppx' -modules src/grammar.ml > src/grammar.ml.depends # cached
# Target: src/grammar.cmx, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, compile, debug, extension:cmx, extension:ml, file:src/grammar.cmx, file:src/grammar.ml, implem, native, ocaml, quiet, short_paths, thread, traverse }
ocamlfind ocamlopt -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx 'ppx-jane -as-ppx' -I src -o src/grammar.cmx src/grammar.ml # cached
# Target: src/lexer.cmx, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, compile, debug, extension:cmx, extension:ml, file:src/lexer.cmx, file:src/lexer.ml, implem, native, ocaml, quiet, short_paths, thread, traverse }
ocamlfind ocamlopt -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx 'ppx-jane -as-ppx' -I src -o src/lexer.cmx src/lexer.ml # cached
# Target: src/parser.cmx, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, compile, debug, extension:cmx, extension:ml, file:src/parser.cmx, file:src/parser.ml, implem, native, ocaml, quiet, short_paths, thread, traverse }
ocamlfind ocamlopt -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx 'ppx-jane -as-ppx' -I src -o src/parser.cmx src/parser.ml # cached
# Target: src/ast_util.cmx, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, compile, debug, extension:cmx, extension:ml, file:src/ast_util.cmx, file:src/ast_util.ml, implem, native, ocaml, quiet, short_paths, thread, traverse }
ocamlfind ocamlopt -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx 'ppx-jane -as-ppx' -I src -o src/ast_util.cmx src/ast_util.ml # cached
# Target: src/interpreter.ml.depends, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, debug, extension:ml, file:src/interpreter.ml, ocaml, ocamldep, quiet, short_paths, thread, traverse }
ocamlfind ocamldep -package core -ppx 'ppx-jane -as-ppx' -modules src/interpreter.ml > src/interpreter.ml.depends
# Target: src/typecheck.ml.depends, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, debug, extension:ml, file:src/typecheck.ml, ocaml, ocamldep, quiet, short_paths, thread, traverse }
ocamlfind ocamldep -package core -ppx 'ppx-jane -as-ppx' -modules src/typecheck.ml > src/typecheck.ml.depends
# Target: src/interpreter.cmx, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, compile, debug, extension:cmx, extension:ml, file:src/interpreter.cmx, file:src/interpreter.ml, implem, native, ocaml, quiet, short_paths, thread, traverse }
ocamlfind ocamlopt -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx 'ppx-jane -as-ppx' -I src -o src/interpreter.cmx src/interpreter.ml
+ ocamlfind ocamlopt -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx 'ppx-jane -as-ppx' -I src -o src/interpreter.cmx src/interpreter.ml
File "src/interpreter.ml", line 20, characters 8-34:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
((Num _, (True|False|Unit|Var _|Unfold _))|
((True|False|Unit|Var _|Unfold _), _))
File "src/interpreter.ml", line 34, characters 4-84:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Unit|Num _|Binop _|If _|Relop _|And _|Or _|Var _|Lam _|App _|Pair _|
Project _|Inject _|Case _|Fix _|TyLam _|TyApp _|Fold_ _|Unfold _|Export _|
Import _)
File "src/interpreter.ml", line 41, characters 8-34:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
((Num _, (True|False|Unit|Var _|Unfold _))|
((True|False|Unit|Var _|Unfold _), _))
File "src/interpreter.ml", line 52, characters 4-162:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
((True,
 (Unit|Num _|Binop _|If _|Relop _|And _|Or _|Var _|Lam _|App _|Pair _|
 Project _|Inject _|Case _|Fix _|TyLam _|TyApp _|Fold_ _|Unfold _|Export _|
 Import _))|
((Unit|Num _|Binop _|If _|Relop _|And _|Or _|Var _|Lam _|App _|Pair _|
 Project _|Inject _|Case _|Fix _|TyLam _|TyApp _|Fold_ _|Unfold _|Export _|
 Import _),
(True|Unit|Num _|Binop _|If _|Relop _|And _|Or _|Var _|Lam _|App _|Pair _|
Project _|Inject _|Case _|Fix _|TyLam _|TyApp _|Fold_ _|Unfold _|Export _|
Import _)))
File "src/interpreter.ml", line 60, characters 4-161:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
((False,
 (Unit|Num _|Binop _|If _|Relop _|And _|Or _|Var _|Lam _|App _|Pair _|
 Project _|Inject _|Case _|Fix _|TyLam _|TyApp _|Fold_ _|Unfold _|Export _|
 Import _))|
((Unit|Num _|Binop _|If _|Relop _|And _|Or _|Var _|Lam _|App _|Pair _|
 Project _|Inject _|Case _|Fix _|TyLam _|TyApp _|Fold_ _|Unfold _|Export _|
 Import _),
(False|Unit|Num _|Binop _|If _|Relop _|And _|Or _|Var _|Lam _|App _|Pair _|
Project _|Inject _|Case _|Fix _|TyLam _|TyApp _|Fold_ _|Unfold _|Export _|
Import _)))
File "src/interpreter.ml", line 70, characters 4-85:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(True|False|Unit|Num _|Var _|Unfold _)
File "src/interpreter.ml", line 78, characters 4-101:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(True|False|Unit|Num _|Var _|Unfold _)
File "src/interpreter.ml", line 86, characters 4-185:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(True|False|Unit|Num _|Var _|Unfold _)
File "src/interpreter.ml", line 101, characters 4-61:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(True|False|Unit|Num _|Var _|Unfold _)
File "src/interpreter.ml", line 108, characters 4-51:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(True|False|Unit|Num _|Var _|Unfold _)
File "src/interpreter.ml", line 115, characters 4-108:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(True|False|Unit|Num _|Var _|Unfold _)
File "src/interpreter.ml", line 94, characters 17-20:
Warning 27: unused variable tau.
File "src/interpreter.ml", line 71, characters 15-18:
Warning 27: unused variable tau.
File "src/interpreter.ml", line 87, characters 25-28:
Warning 27: unused variable tau.
File "src/interpreter.ml", line 101, characters 32-33:
Warning 27: unused variable a.
File "src/interpreter.ml", line 108, characters 35-38:
Warning 27: unused variable tau.
File "src/interpreter.ml", line 116, characters 23-30:
Warning 27: unused variable tau_adt.
File "src/interpreter.ml", line 116, characters 32-39:
Warning 27: unused variable tau_mod.
# Target: src/typecheck.cmx, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, compile, debug, extension:cmx, extension:ml, file:src/typecheck.cmx, file:src/typecheck.ml, implem, native, ocaml, quiet, short_paths, thread, traverse }
ocamlfind ocamlopt -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx 'ppx-jane -as-ppx' -I src -o src/typecheck.cmx src/typecheck.ml
+ ocamlfind ocamlopt -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx 'ppx-jane -as-ppx' -I src -o src/typecheck.cmx src/typecheck.ml
File "src/typecheck.ml", line 132, characters 9-10:
Warning 11: this match case is unused.
File "src/typecheck.ml", line 207, characters 4-5:
Warning 11: this match case is unused.
# Target: src/main.cmx, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, compile, debug, extension:cmx, extension:ml, file:src/main.cmx, file:src/main.ml, implem, native, ocaml, quiet, short_paths, thread, traverse }
ocamlfind ocamlopt -c -w A-4-33-40-41-42-43-34-44 -strict-sequence -g -annot -bin-annot -short-paths -thread -package core -ppx 'ppx-jane -as-ppx' -I src -o src/main.cmx src/main.ml
# Target: src/main.native, tags: { package(core), ppx(ppx-jane -as-ppx), annot, bin_annot, debug, dont_link_with, extension:native, file:src/main.native, link, native, ocaml, program, quiet, short_paths, thread, traverse }
ocamlfind ocamlopt -linkpkg -g -thread -package core -I src src/ast.cmx src/flags.cmx src/grammar.cmx src/lexer.cmx src/parser.cmx src/ast_util.cmx src/interpreter.cmx src/typecheck.cmx src/main.cmx -o src/main.native
# Compilation successful.
